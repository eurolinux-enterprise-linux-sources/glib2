From d9b6a94356529c28d772c6c78e26aaf02845a469 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Thu, 28 Aug 2014 15:58:01 -0400
Subject: [PATCH] gdesktopappinfo: check gvfs for uri handlers like in 2.26

Many desktop components rely on uri handlers being defined
in gconf (bridged to glib via a gvfs module).  This commit
reintroduces that feature, which was dropped in 2.28

https://bugzilla.redhat.com/show_bug.cgi?id=1120611
---
 gio/gdesktopappinfo.c | 61 ++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 55 insertions(+), 6 deletions(-)

diff --git a/gio/gdesktopappinfo.c b/gio/gdesktopappinfo.c
index d9d17b2..49a5301 100644
--- a/gio/gdesktopappinfo.c
+++ b/gio/gdesktopappinfo.c
@@ -2226,68 +2226,117 @@ g_app_info_get_default_for_type (const char *content_type,
 	{
 	  if (must_support_uris && !g_app_info_supports_uris (info))
 	    {
 	      g_object_unref (info);
 	      info = NULL;
 	    }
 	  else
 	    break;
 	}
     }
   
   g_list_free_full (desktop_entries, g_free);
 
   return info;
 }
 
 /**
  * g_app_info_get_default_for_uri_scheme:
  * @uri_scheme: a string containing a URI scheme.
  *
  * Gets the default application for launching applications 
  * using this URI scheme. A URI scheme is the initial part 
  * of the URI, up to but not including the ':', e.g. "http", 
  * "ftp" or "sip".
  * 
  * Returns: (transfer full): #GAppInfo for given @uri_scheme or %NULL on error.
  **/
 GAppInfo *
 g_app_info_get_default_for_uri_scheme (const char *uri_scheme)
 {
-  GAppInfo *app_info;
+  GAppInfo *app_info = NULL;
   char *content_type, *scheme_down;
+  static gsize lookup = 0;
 
-  scheme_down = g_ascii_strdown (uri_scheme, -1);
-  content_type = g_strdup_printf ("x-scheme-handler/%s", scheme_down);
-  g_free (scheme_down);
-  app_info = g_app_info_get_default_for_type (content_type, FALSE);
-  g_free (content_type);
+  if (g_once_init_enter (&lookup))
+    {
+      gsize setup_value = 1;
+      GDesktopAppInfoLookup *lookup_instance;
+      const char *use_this;
+      GIOExtensionPoint *ep;
+      GIOExtension *extension;
+      GList *l;
+
+      use_this = g_getenv ("GIO_USE_URI_ASSOCIATION");
+
+      /* Ensure vfs in modules loaded */
+      _g_io_modules_ensure_loaded ();
+
+      ep = g_io_extension_point_lookup (G_DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME);
+
+      lookup_instance = NULL;
+      if (use_this)
+       {
+         extension = g_io_extension_point_get_extension_by_name (ep, use_this);
+         if (extension)
+           lookup_instance = g_object_new (g_io_extension_get_type (extension), NULL);
+       }
+
+      if (lookup_instance == NULL)
+       {
+         for (l = g_io_extension_point_get_extensions (ep); l != NULL; l = l->next)
+           {
+             extension = l->data;
+             lookup_instance = g_object_new (g_io_extension_get_type (extension), NULL);
+             if (lookup_instance != NULL)
+               break;
+           }
+       }
+
+      if (lookup_instance != NULL)
+        setup_value = (gsize) lookup_instance;
+
+      g_once_init_leave (&lookup, setup_value);
+    }
+
+  if (lookup > 1)
+    app_info = g_desktop_app_info_lookup_get_default_for_uri_scheme (G_DESKTOP_APP_INFO_LOOKUP (lookup),
+                                                                     uri_scheme);
+
+  if (app_info == NULL)
+    {
+      scheme_down = g_ascii_strdown (uri_scheme, -1);
+      content_type = g_strdup_printf ("x-scheme-handler/%s", scheme_down);
+      g_free (scheme_down);
+      app_info = g_app_info_get_default_for_type (content_type, FALSE);
+      g_free (content_type);
+    }
 
   return app_info;
 }
 
 static void
 get_apps_from_dir (GHashTable *apps, 
                    const char *dirname, 
                    const char *prefix)
 {
   GDir *dir;
   const char *basename;
   char *filename, *subprefix, *desktop_id;
   gboolean hidden;
   GDesktopAppInfo *appinfo;
   
   dir = g_dir_open (dirname, 0, NULL);
   if (dir)
     {
       while ((basename = g_dir_read_name (dir)) != NULL)
 	{
 	  filename = g_build_filename (dirname, basename, NULL);
 	  if (g_str_has_suffix (basename, ".desktop"))
 	    {
 	      desktop_id = g_strconcat (prefix, basename, NULL);
 
 	      /* Use _extended so we catch NULLs too (hidden) */
 	      if (!g_hash_table_lookup_extended (apps, desktop_id, NULL, NULL))
 		{
 		  appinfo = g_desktop_app_info_new_from_filename (filename);
                   hidden = FALSE;
-- 
2.0.1

